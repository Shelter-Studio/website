<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>庇护所</title>
  
  <subtitle>Shelter</subtitle>
  <link href="https://xavierwah.xyz/atom.xml" rel="self"/>
  
  <link href="https://xavierwah.xyz/"/>
  <updated>2022-04-23T10:23:16.592Z</updated>
  <id>https://xavierwah.xyz/</id>
  
  <author>
    <name>Xavier Wah</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于常用变换的字符串加密</title>
    <link href="https://xavierwah.xyz/f685b910b6f0/"/>
    <id>https://xavierwah.xyz/f685b910b6f0/</id>
    <published>2021-08-08T15:04:42.000Z</published>
    <updated>2022-04-23T10:23:16.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>本文将根据<code>Python</code>，编写一套字符串加密方法。</p><h2 id="浅说加密"><a href="#浅说加密" class="headerlink" title="浅说加密"></a>浅说加密</h2><p>你也许听说过许多常见的加密方法，从古典密码（<a href="https://zh.wikipedia.org/wiki/%E5%87%B1%E6%92%92%E5%AF%86%E7%A2%BC"><code>凯撒密码</code></a>、<a href="https://zh.wikipedia.org/wiki/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81"><code>维吉尼亚密码</code></a>等替换式密码或移项式密码）到现代计算机所使用的<a href="https://zh.wikipedia.org/wiki/Base64"><code>Base64</code></a>、<a href="https://zh.wikipedia.org/wiki/AES%E6%8C%87%E4%BB%A4%E9%9B%86"><code>DES</code></a>、<a href="https://zh.wikipedia.org/wiki/AES%E6%8C%87%E4%BB%A4%E9%9B%86"><code>AES</code></a>、<a href="https://zh.wikipedia.org/wiki/3DES"><code>3DES</code></a>、<a href="https://zh.wikipedia.org/wiki/RC4"><code>RC4</code></a>等先进的加密算法。</p><p>密码学是研究如何隐密地传递信息的学科。此处的关键词即为“隐秘”和“传递信息”，你需要将明文转换为外人无法或难破译的密文，使得中间传递信息的人即便获取信息也无法得知具体内容。故上述列举中并没有包含<a href="https://zh.wikipedia.org/wiki/MD5"><code>MD5</code></a>等算法，因为这只是信息摘要算法，并无法保证能够还原成原信息。且接收方会和窃听信息的人一样一头雾水，只能通过暴力算法才能够获取信息。例如各位可以试还原下方的简单32位<code>MD5</code>串，其仅包含<a href="https://zh.wikipedia.org/wiki/ASCII"><code>ASCII</code></a>的可显示字符。</p><blockquote><p><code>307A24F535F56DD65F3F6EFA88988D94</code></p></blockquote><p>因此，我们所设计的算法应该包含以下特点：</p><ul><li><strong>可逆性</strong> 让密文能够完美的还原成明文。</li><li><strong>可解性</strong> 加密和解密过程能在有限的时间内完成。</li><li><strong>开放性</strong> 算法不应限制明文的长度，且时间复杂度需趋近线性。</li><li><strong>隐蔽性</strong> 算法核心实现部分应经可能隐蔽。</li></ul><p>上述提到的加密过程，多在互联网上即可找到对应加密、解密工具，因此我自研了一个加密方法。</p><h2 id="思路阐述"><a href="#思路阐述" class="headerlink" title="思路阐述"></a>思路阐述</h2><p>首先输入原字符串，对其中每个字符求<code>ord()</code>，再转换为$16$进制下的四位，拼接成新字符串。</p><p>我无意间发现了盲文点阵在<code>Unicode</code>中恰好占用连续的$256$个空位。再从新字符串中两两选择，得到的值正好处于$0\sim 256$的区间内，于是对应翻译成盲文点阵，再拼接起来即为成品。</p><p>解密就为逆过程。</p><p>得到的密文大概长下面这样：</p><blockquote><p><code>⠛⢃⠛⢏⠛⢏⠛⢋⠛⢎⠛⡕⠛⡊⠛⡊⠛⢓⠛⡼⠛⢑⠛⢄⠛⢀⠛⢍⠛⢒⠛⡼⠛⢃⠛⡉⠛⢓⠛⢔⠛⢕⠛⡊⡡⠛</code></p></blockquote><h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>原代码请自行探索，盲文字符所在区间是从<code>U+2800</code>至<code>U+28FF</code>，只能告诉你这么多了。</p><p>毕竟是自用，所以不可能给你透露更多啦——</p><p><strong>也掺杂了其它的步骤在中间，不可能你随随便便就解出来的。</strong></p><p>如果能将上文的点阵解出来明文，请在下方留言，我膜拜。</p><p><del>这篇文章是喝完酒写的。</del></p>]]></content>
    
    
    <summary type="html">本文将根据 Python，编写一套字符串加密方法。</summary>
    
    
    
    <category term="Coding" scheme="https://xavierwah.xyz/categories/Coding/"/>
    
    
    <category term="Python" scheme="https://xavierwah.xyz/tags/Python/"/>
    
    <category term="Cryptography" scheme="https://xavierwah.xyz/tags/Cryptography/"/>
    
  </entry>
  
  <entry>
    <title>关于 1996 年普特南 A-6 题的讨论</title>
    <link href="https://xavierwah.xyz/0a21f13bd0c3/"/>
    <id>https://xavierwah.xyz/0a21f13bd0c3/</id>
    <published>2021-08-05T11:32:21.000Z</published>
    <updated>2022-04-23T10:23:18.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><blockquote><p><em>Four points are chosen at random on the surface of a sphere. What is the probability that the center of the sphere lies inside the tetrahedron whose vertices are at the four points? (It is understood that each point is independently chosen relative to a uniform distribution on the sphere.)</em></p></blockquote><!-- more --><h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h2><p>此题为1996年第53届普特南<em>A-6</em>题。题面英文原文已在引子中给出。中文翻译如下：</p><blockquote><p>在球体的表面随机选择四个点，问球心位于以四点为顶点的四面体内部的概率是多少？（每个点都是独立选择的。）<br><em>翻译可能不精确，建议根据原文辅助理解。</em></p></blockquote><h2 id="先简单聊聊"><a href="#先简单聊聊" class="headerlink" title="先简单聊聊"></a>先简单聊聊</h2><p>我对概率论等并没有深入的了解，看到这题之后“随机”字眼让我不知道如何处理，也正是因此我无法给出详细证明的原因。证明是一件苛刻的事，等日后我有了足够的数学基础，达到可以证明此题，我会试着在此页写下我的证明过程。</p><p>此类三维的题目不妨先化作更低维度，再探寻普遍规律。例如在二维时，可以化为：</p><blockquote><p>在圆上随机选择三个点，问圆心位于以三点为顶点的三角形内部的概率是多少？</p></blockquote><p>当随意选择两点$P_1$、$P_2$后，若想$\triangle P_1P_2P_3$过圆心，则$P_3$只可能在$\overset{\frown}{P_1P_2}$关于圆心$O$在$\odot O$的投影弧上，也就是下图中的加粗部分。</p><p><img src="/projection_arc.png" alt="$P_3$在$\overset{\frown}{P_1&#39;P_2&#39;}$上时圆心就在内部了"></p><p>此时圆心在$\triangle P_1P_2P_3$内的概率即为在$\odot O$上随意取点，其在$\overset{\frown}{P_1’P_2’}$上的概率，即为$\frac{\angle P_1OP_2}{2\pi}$。（我们定义$0&lt;\angle P_1OP_2&lt;\pi$）</p><p>由于任意取点$P_1$、$P_2$，故$\angle P_1OP_2$的平均期望为$\frac{\pi}{2}$，此时$P&#x3D;\frac{1}{4}$。</p><p>因此在圆上随机选择三个点，圆心位于以三点为顶点的三角形内部的概率为$\frac{1}{4}$。</p><p>我们只需要将其推广到球体上，此时若想四面体包含圆心，则第$4$点一定在球面三角形$P_1P_2P_3$关于球心$O$的投影上。也就是说，落点使得“题目条件符合”的区域由线变为面，此时只需按照曲面的平均期望计算即可。</p><p>我最后没解释的通。</p><h2 id="回头看特殊的结果"><a href="#回头看特殊的结果" class="headerlink" title="回头看特殊的结果"></a>回头看特殊的结果</h2><p>在二维时，得出的答案十分特殊，我们是否能够从另一方面解释$\frac{1}{4}$作为概率是如何出现的。</p><p>不将其看作固定两点，而是过圆心作两条任意直线，分别于$\odot O$交于$A$、$B$、$C$、$D$四点。我们在每条直线上各任取一点，作为前一个方法中固定的$2$点。</p><p><img src="/multiple_choices.png" alt="另一种视角下的多种可能"></p><p>此时，在圆上随意取的第三点$E$一定在$\overset{\frown}{AC}$、$\overset{\frown}{BC}$、$\overset{\frown}{AD}$、$\overset{\frown}{BD}$中。任取两条直线，随机取两点有四种可能性：$A$和$C$、$A$和$D$、$B$和$C$、$B$和$D$，这四种可能性若使点$E$“符合题目条件”，则分别对应$E$在$\overset{\frown}{BD}$、$\overset{\frown}{AD}$、$\overset{\frown}{BC}$、$\overset{\frown}{AC}$上。也就是说，每个$E$的位置对应$1$种“符合”的情况，与另外$3$种“不符合”的情况。</p><p>二维时的平均期望即为$\frac{1}{4}$。</p><p>三维时，即作过球心的三条任意不重合直线，交球表于$6$点，在每条直线上各任取一点，作为固定的$3$点。</p><p>此时便分出了$8$种不同的取点情况，其中每个第四点的位置对应$1$种“符合”的情况与$7$种“不符合”的情况。即平均期望为$\frac{1}{8}$。</p><p>因此在球体的表面随机选择四个点，球心位于以四点为顶点的四面体内部的概率为$\frac{1}{8}$。</p><h2 id="另一种严谨的解法"><a href="#另一种严谨的解法" class="headerlink" title="另一种严谨的解法"></a>另一种严谨的解法</h2><p>上述的仅为几何直觉，我相信是写不成严谨的证明过程的。</p><p>以下附另一种解法，原文标题<em>Capturing the Origin with Random Points: Generalizations of a Putnam Problem</em>。你也可以<a href="https://lsusmath.rickmabry.org/psisson/putnam/putnam-web.htm">在网页查看</a>。</p><p><i class="download-icon fa-solid fa-cloud-arrow-down"></i> <a href="putnam1996a6.pdf" download>下载 <code>putnam1996a6.pdf</code></a> 下载证明的原文。</p><h2 id="欧文的解法"><a href="#欧文的解法" class="headerlink" title="欧文的解法"></a>欧文的解法</h2><p>假设随便取三点，称其为点$X$、点$Y$、点$Z$，则存在球面三角形$XYZ$在球面上。现尝试取一点$K$，令四面体$KXYZ$包括球心$O$。</p><p>延长$XO$、$YO$、$ZO$分别交球面于点$X’$、点$Y’$、点$Z’$。我们发现，对于$XYZ$，点$K$取在$XX’$或$YY’$或$ZZ’$上时题目条件恰好成立。更准确地说，这三条线规定了点$K$的取法空间边界，即对于任何在球面三角形$X’Y’Z’$上的点$K$，题目条件成立。</p><p>显然，球面三角形$XYZ$与球面三角形$X’Y’Z’$面积相同。只需找出球面三角形$XYZ$与球体表面积$4\pi r^2$之比，并相除求得点$K$存在于球面三角形$X’Y’Z’$之内的概率。</p><p>令球面三角形中两两夹角角度为$a$、$b$、$c$，面积为$a+b+c-\pi$。考虑取点为独立同分布，那么显然$abc$可以表示为连续型均匀分布，其分布范围即其期望值为$0\sim\pi$，根据连续型均匀分布特性，显然为$\frac{\pi}{2}$。代入求得期望面积即$\frac{3\pi}{2}-\pi&#x3D;\frac{\pi}{2}$。球体半径为$r$，则期望面积为$\frac{\pi r^2}{2}$。</p><p>遵循上文，得到出现在此区间内的概率是$\frac{\frac{\pi r^2}{2}}{4\pi r^2}$，即$\frac{1}{8}$。</p><h2 id="新生群里的尝试"><a href="#新生群里的尝试" class="headerlink" title="新生群里的尝试"></a>新生群里的尝试</h2><blockquote><p>构造二部图，其中一部顶点为所有不符合条件的四面体，另一部为所有符合条件的四面体。以如下方式构造此图的边：<br>对于每个不符合条件的四面体，过其对应最大面的顶点做高，与球相交于另一点，此点和对应面构成的四面体在这个四面体的邻域之内。于是每个符合条件的四面体的度都是$4$，而每个不符合的，度都是$1$。因此我们随机取此图中一点，在左部的概率是$\frac{4}{5}$，在右部的概率是$\frac{1}{5}$，故在球体的表面随机选择四个点，球心位于以四点为顶点的四面体内部的概率为$\frac{1}{5}$。</p></blockquote><p>此方法会出现“不符合”对应“不符合”的情况，故得到的结果与参考不同。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><strong>威廉·洛厄尔·普特南数学竞赛</strong>，通常简称为普特南竞赛，是美国和加拿大高等教育机构注册的本科大学生的年度数学竞赛，它以世界上最负盛名的大学生数学竞赛被广泛认可。每届共有$12$道试题，这些问题通常只需具备大学数学的基础就能解决，但需要广泛的创造性思维。其分为$A$、$B$两次坐席，每次解决$6$道以从简单到复杂排序的试题。上题即为1996年第53届普特南<em>A-6</em>题。</p><p>如果你有其它的解决方案或尝试过程，欢迎<a href="mailto:xavierwah@xavierwah.xyz">给我发电子邮件</a>。若上述过程有误，烦请指出错误以便改正。</p>]]></content>
    
    
    <summary type="html">在球体的表面随机选择四个点，问球心位于以四点为顶点的四面体内部的概率是多少？</summary>
    
    
    
    <category term="Science" scheme="https://xavierwah.xyz/categories/Science/"/>
    
    
    <category term="Mathematics" scheme="https://xavierwah.xyz/tags/Mathematics/"/>
    
  </entry>
  
  <entry>
    <title>获取 Minecraft 正版玩家皮肤</title>
    <link href="https://xavierwah.xyz/770ff2cc819f/"/>
    <id>https://xavierwah.xyz/770ff2cc819f/</id>
    <published>2021-07-26T04:18:02.000Z</published>
    <updated>2022-04-23T10:22:26.409Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>前段日子和朋友玩 Hypixel 的时候，朋友问我能不能把某个玩家的皮肤给下载下来私用。我当时使用了 <a href="https://namemc.com/">NameMC</a> 获取玩家皮肤，但后来用来获取玩家的 UUID 时，发现有些玩家没办法搜到。这也就催生了我去寻找远古方法，直接通过 Mojang 服务器获取玩家皮肤、UUID 等信息的想法。</p><h2 id="原理阐释"><a href="#原理阐释" class="headerlink" title="原理阐释"></a>原理阐释</h2><p>首先，我们通过 Mojang 提供的官方 <em>API</em> <code>api.mojang.com/users/profiles/minecraft/[ID]</code> 获取玩家的 UUID。对应填入玩家 ID，访问后就可以获取一段对应的 JSON，格式大概如下：</p><pre><code class="json">&#123;&quot;name&quot;:&quot;XavierWah&quot;,&quot;id&quot;:&quot;0be6e8232e5f4cb198320792b0da9188&quot;&#125;</code></pre><p>很明显可以看出，这段信息中键 <code>name</code> 为玩家 ID，键 <code>id</code> 为玩家 UUID。玩家的 UUID 到手后，我们可以通过 <em>Session Server</em> <code>sessionserver.mojang.com/session/minecraft/profile/[UUID]</code> 获取到玩家的材质信息，同样是一段 JSON，格式大概如下：</p><pre><code class="json">&#123;  &quot;id&quot; : &quot;0be6e8232e5f4cb198320792b0da9188&quot;,  &quot;name&quot; : &quot;XavierWah&quot;,  &quot;properties&quot; : [ &#123;    &quot;name&quot; : &quot;textures&quot;,    &quot;value&quot; : &quot;ewogICJ0aW1lc3RhbXAiIDogMTYyNzI5Mjk3NDkwMCwKICAicHJvZmlsZUlkIiA6ICIwYmU2ZTgyMzJlNWY0Y2IxOTgzMjA3OTJiMGRhOTE4OCIsCiAgInByb2ZpbGVOYW1lIiA6ICJYYXZpZXJXYWgiLAogICJ0ZXh0dXJlcyIgOiB7CiAgICAiU0tJTiIgOiB7CiAgICAgICJ1cmwiIDogImh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvN2NiMzkxMTdhN2U4ZmYxYjE0M2VmMGU4YzRiMDg5MjA0ZTk3YTBlNmQwMGRjZjRlNjkxYWFmODlmNzhkOWQzMSIsCiAgICAgICJtZXRhZGF0YSIgOiB7CiAgICAgICAgIm1vZGVsIiA6ICJzbGltIgogICAgICB9CiAgICB9CiAgfQp9&quot;  &#125; ]&#125;</code></pre><p>这段里我们需要的信息，就是此处键 <code>value</code> 的值。这是一段经过 Base64 加密后的信息，解密后仍是一段 JSON，格式大概如下：</p><pre><code class="json">&#123;  &quot;timestamp&quot; : 1627294093042,  &quot;profileId&quot; : &quot;0be6e8232e5f4cb198320792b0da9188&quot;,  &quot;profileName&quot; : &quot;XavierWah&quot;,  &quot;textures&quot; : &#123;    &quot;SKIN&quot; : &#123;      &quot;url&quot; : &quot;http://textures.minecraft.net/texture/7cb39117a7e8ff1b143ef0e8c4b089204e97a0e6d00dcf4e691aaf89f78d9d31&quot;,      &quot;metadata&quot; : &#123;        &quot;model&quot; : &quot;slim&quot;      &#125;    &#125;  &#125;&#125;</code></pre><p>此处的 <code>timestamp</code> 为我们访问网站时的时间戳，<code>SKIN</code> 中键 <code>url</code> 的值代表玩家皮肤的网址、键 <code>model</code> 的值代表玩家皮肤的种类（这个键不一定存在，但纤细一定是 <code>slim</code>）。访问这个网址，就得到了玩家的皮肤。人工操作起来很复杂，需要辗转多次才能得到最终结果，并且中途还需要进行一次 Base64 解码，于是我便写了一个程序来帮助我获取玩家信息。</p><h2 id="代码解剖"><a href="#代码解剖" class="headerlink" title="代码解剖"></a>代码解剖</h2><p><i class="download-icon fa-solid fa-cloud-arrow-down"></i> <a href="skinFetcher.py" download>下载 <code>skinFetcher.py</code></a> 下方的代码。</p><pre><code class="python">import requestsimport base64import jsonusername = input(&#39;输入要获取皮肤玩家 ID：&#39;).split()[0]# 获取用户 UUIDapiWeb = requests.get(&#39;https://api.mojang.com/users/profiles/minecraft/&#123;&#125;&#39;.format(username)).contentuseruuid = json.loads(apiWeb)[&#39;id&#39;]# 获取用户信息对应 Base64sessionWeb = requests.get(&#39;https://sessionserver.mojang.com/session/minecraft/profile/&#123;&#125;&#39;.format(useruuid)).contentuserbase = json.loads(sessionWeb)[&#39;properties&#39;][0][&#39;value&#39;].encode(&#39;utf-8&#39;)# 解码 Base64 并下载用户皮肤userskin = json.loads(base64.b64decode(userbase))[&#39;textures&#39;][&#39;SKIN&#39;][&#39;url&#39;]fetch = open(&#39;&#123;&#125;.png&#39;.format(username), &#39;wb&#39;).write(requests.get(userskin).content)input(&#39;已保存至同级目录下，按回车键退出。&#39;)</code></pre><p>由于有些人没有装 Python，所以我又用 PowerShell 写了一个功能一样的。</p><p><i class="download-icon fa-solid fa-cloud-arrow-down"></i> <a href="skinFetcher.ps1" download>下载 <code>skinFetcher.ps1</code></a> 下方的代码。</p><pre><code class="powershell">$username = Read-Host &#39;输入要获取皮肤玩家 ID&#39;# 获取用户 UUID$apiWeb = ( Invoke-WebRequest -Uri ( &#39;https://api.mojang.com/users/profiles/minecraft/&#39; + $username ) ).Content$useruuid = ( $apiWeb | ConvertFrom-Json ).id# 获取用户信息对应 Base64$sessionWeb = ( Invoke-WebRequest -Uri ( &#39;https://sessionserver.mojang.com/session/minecraft/profile/&#39; + $useruuid ) ).Content$userbase = ( $sessionWeb | ConvertFrom-Json ).properties.value# 解码 Base64 并下载用户皮肤$userskin = ( ( [Text.Encoding]::ASCII.GetString([Convert]::FromBase64String($userbase)) ) | ConvertFrom-Json ).textures.SKIN.urlInvoke-WebRequest $userskin -OutFile ( ($pwd).Path + &#39;\&#39; + $username + &#39;.png&#39; )Read-Host &#39;已保存至同级目录下，按回车键退出。&#39;</code></pre><p>以上代码的逻辑和我们人工操作是一个流程。运行程序之后，直接根据提示输入玩家 ID 即可，皮肤会自动下载到运行目录中。</p>]]></content>
    
    
    <summary type="html">前段日子和朋友玩 Hypixel 的时候，朋友问我能不能把某个玩家的皮肤给下载下来私用。我当时使用了 NameMC 获取玩家皮肤，但后来用来获取玩家的 UUID 时，发现有些玩家没办法搜到。这也就催生了我去寻找远古方法，直接通过 Mojang 服务器获取玩家皮肤、UUID 等信息的想法。</summary>
    
    
    
    <category term="Minecraft" scheme="https://xavierwah.xyz/categories/Minecraft/"/>
    
    
    <category term="Minecraft" scheme="https://xavierwah.xyz/tags/Minecraft/"/>
    
    <category term="Python" scheme="https://xavierwah.xyz/tags/Python/"/>
    
    <category term="PowerShell" scheme="https://xavierwah.xyz/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>起点</title>
    <link href="https://xavierwah.xyz/03ea5e0afdd2/"/>
    <id>https://xavierwah.xyz/03ea5e0afdd2/</id>
    <published>2021-07-25T23:08:43.000Z</published>
    <updated>2022-04-22T01:02:27.029Z</updated>
    
    <content type="html"><![CDATA[<p>嗨嗨，这里是 Xavier Wah 的庇护所，也是我的个人博客。<br>Minecraft 和程序设计等内容将会成为庇护所的主要更新内容，偶尔也会上传文学创作的作品。<br>截至现在，我终于将所有内容都配置好了。今后我会在这个博客更新一些内容、发布源码等，希望可以多加关注，在这里找到你需要的内容。<br>永远好奇，别处见。</p>]]></content>
    
    
    <summary type="html">嗨嗨，这里是 Xavier Wah 的庇护所，也是我的个人博客。</summary>
    
    
    
    <category term="Announcement" scheme="https://xavierwah.xyz/categories/Announcement/"/>
    
    
    <category term="Announcement" scheme="https://xavierwah.xyz/tags/Announcement/"/>
    
  </entry>
  
</feed>
